#!/usr/bin/env python
"""
Usage: mulder [<backup>]
"""
import datetime
import os
import subprocess
import sys
import tarfile
import tempfile

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

from boto.exception import S3ResponseError
from boto.s3.connection import S3Connection
from boto.s3.key import Key


FILE = '~/.mulder'
TMPDIR = tempfile.gettempdir()


def error(msg, exitcode=1):
    """
    Print ``msg`` to stderr and exit with ``exitcode``.
    """
    msg = os.path.basename(sys.argv[0]) + ': ' + msg
    sys.stderr.write(msg + '\n')
    sys.exit(exitcode)


def expand(fn):
    """
    Fully expand a path.
    """
    fn = os.path.expandvars(fn)
    fn = os.path.expanduser(fn)
    return os.path.abspath(fn)


class Backup(object):

    OPTIONS = ['bucket', 'exclude', 'files', 'gpg', 'name', 'access_key', 'secret_key']
    REQUIRED_OPTIONS = ['bucket', 'name', 'files']

    def __init__(self, options, backup):
        self.backup = backup
        self.setup_config(options)
        self.validate_options()
        self.validate_exclude()
        self.validate_files()
        self.setup_connection()

    def cleanup(self):
        """
        Removes any archives created by the backup.
        """
        for fn in self.archives:
            os.unlink(fn)

    def create_archive(self):
        """
        Create the archive from the given list of files.
        """
        filename = datetime.datetime.now().strftime(self.name) + '.tar.gz'
        filename = os.path.join(TMPDIR, filename)

        tarball = tarfile.open(filename, 'w|gz')
        for fn in self.files:
            tarball.add(fn, exclude=self.excluded)
        tarball.close()

        self.archive = filename
        self.archives = [filename]

    def encrypt_archive(self):
        """
        Encrypt the archive if necessary.
        """
        if getattr(self, 'gpg', force):
            cmds = ['gpg', '--encrypt', '--default-recipient-self', self.archive]
            proc = subprocess.Popen(cmds)
            proc.communicate()
            self.archive = self.archive + '.gpg'
            self.archives.append(self.archive)

    def eval(self, cmd):
        """
        Call ``cmd``, returning it's stdout output.
        """
        proc = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE)
        return proc.communicate()[0].strip()

    def excluded(self, tarinfo):
        """
        Checks if a file should be excluded from the archive.
        """
        return tarinfo in self.exclude

    def progress(self, cur, total):
        """
        Display a very simple percentage-based progress bar.
        """
        sys.stderr.write(str(cur * 100 / total) + "%\r")
        sys.stderr.flush()

    def run(self):
        """
        Create an archive and upload it, encrypting if necessary.
        """
        try:
            self.create_archive()
            self.encrypt_archive()
            self.upload_archive()
        except S3ResponseError as e:
            error("Error in backup '%s': %s" % (self.backup, e.error_message))
        except Exception as e:
            error(e)
        finally:
            self.cleanup()

    def setup_config(self, options):
        """
        Set up configuration for this backup.
        """
        for option in self.OPTIONS:
            # regular option
            if option in options.keys():
                setattr(self, option, options[option])

            # _eval option
            if option + '_eval' in options.keys():
                setattr(self, option, self.eval(options[option + '_eval']))

    def setup_connection(self):
        """
        Set up a connection to S3.
        """
        self.conn = S3Connection(self.access_key, self.secret_key)

    def upload_archive(self):
        """
        Upload the archive to S3.
        """
        bucket = self.conn.get_bucket(self.bucket)
        key = Key(bucket)
        key.name = os.path.basename(self.archive)
        key.set_contents_from_filename(self.archive, cb=self.progress)

    def validate_exclude(self):
        """
        Expand all the filenames in the exclude option. We do not need
        to validate the each file exists as it would be excluded
        anyway.
        """
        exclude = []
        if hasattr(self, 'exclude'):
            for fn in self.exclude.split(','):
                exclude.append(expand(fn.strip()))
        self.exclude = exclude

    def validate_files(self):
        """
        Make sure the files option is not empty and that each file
        exists.
        """
        if not self.files:
            error("No files specified for backup '%s'" % self.backup)

        files = []
        for fn in self.files.split(','):
            fn = expand(fn.strip())
            if not any([os.path.isfile(fn), os.path.isdir(fn)]):
                error("Invalid file/directory '%s' for backup '%s'" % (fn, self.backup))
            files.append(fn)
        self.files = files

    def validate_options(self):
        """
        Make sure each required option is present.
        """
        for option in self.REQUIRED_OPTIONS:
            if not getattr(self, option, None):
                error("Backup '%s' is missing option '%s'" % (self.backup, option))


def main():
    config = configparser.ConfigParser()

    try:
        config.readfp(open(expand(FILE)))
    except IOError:
        error("Couldn't read your config file.")

    # list all backups
    if len(sys.argv) == 1:
        sys.stdout.write('\n'.join(sorted(config.sections())) + '\n')
        sys.exit(0)

    # does the backup exist?
    try:
        options = dict(config.items(sys.argv[1]))
    except configparser.NoSectionError:
        error("Invalid backup '%s'" % sys.argv[1])

    # backup is good. let's do it
    backup = Backup(options, sys.argv[1])
    backup.run()


if __name__ == '__main__':
    main()
