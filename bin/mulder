#!/usr/bin/env python
"""
Usage: mulder [<backup>]
"""
import datetime
import mimetypes
import os
import shlex
import subprocess
import sys
import tarfile
import tempfile

try:
    import configparser
except ImportError:
    import ConfigParser as configparser


FILE = '~/.mulder'
TMPDIR = tempfile.gettempdir()


def error(msg, exitcode=1):
    """
    Print ``msg`` to stderr and exit with ``exitcode``.
    """
    msg = os.path.basename(sys.argv[0]) + ': ' + msg
    sys.stderr.write(msg + '\n')
    sys.exit(exitcode)


def expand(fn):
    """
    Fully expand a path.
    """
    fn = os.path.expandvars(fn)
    fn = os.path.expanduser(fn)
    return os.path.abspath(fn)


class Uploader(object):

    def __init__(self, options):
        self.options = options

    def progress(self, cur, total):
        """
        Display a very simple percentage-based progress bar.
        """
        sys.stderr.write("\r%s%%" % str(cur * 100 / total))
        sys.stderr.flush()


class RsyncUploader(Uploader):
    """
    Transfer a file via rsync.
    """

    scheme = 'rsync'

    def upload(self, fn):
        cmds = ['rsync', '-a', '-z', '--progress', fn, self.options['destination']]
        proc = subprocess.Popen(cmds)
        proc.communicate()


class S3Uploader(Uploader):
    """
    Upload a file to S3.
    """

    scheme = 's3'

    def upload(self, fn):
        from boto.exception import S3ResponseError
        from boto.s3.connection import S3Connection
        from boto.s3.key import Key

        try:
            conn = S3Connection(self.options['access_key'], self.options['secret_key'])
            bucket = conn.get_bucket(self.options['destination'])
            key = Key(bucket)
            key.name = os.path.basename(fn)
            key.set_contents_from_filename(fn, cb=self.progress)
        except S3ResponseError as e:
            error(e.error_message)


class Backup(object):

    REQUIRED_OPTIONS = ['destination', 'name', 'files']
    GPG_OPTIONS = ['--encrypt', '--default-recipient-self', '--quiet', '--batch', '--use-agent']
    DELIMITER = ','

    def __init__(self, options):
        self.options = {}

        self.setup_config(options)
        self.validate_options()
        self.validate_destination()
        self.validate_exclude()
        self.validate_files()

    def cleanup(self):
        """
        Removes any archives created by the backup.
        """
        for fn in self.archives:
            os.unlink(fn)

    def create_archive(self):
        """
        Create the archive from the given list of files.
        """
        filename = datetime.datetime.now().strftime(self.options['name']) + '.tar.gz'
        filename = os.path.join(TMPDIR, filename)

        tarball = tarfile.open(filename, 'w|gz')
        for fn in self.files:
            try:
                # use filter for Python 2.7+
                tarball.add(fn, filter=self.filter)
            except TypeError:
                tarball.add(fn, exclude=self.excluded)
        tarball.close()

        self.archive = filename
        self.archives = [filename]

    def encrypt_archive(self):
        """
        Encrypt the archive if necessary.
        """
        if not self.options.get('gpg', False):
            return

        if self.options.get('sign', False):
            self.GPG_OPTIONS.append('--sign')

        cmds = ['gpg'] + self.GPG_OPTIONS + [self.archive]
        proc = subprocess.Popen(cmds)
        proc.communicate()
        self.archive = self.archive + '.gpg'
        self.archives.append(self.archive)

    def eval(self, cmd):
        """
        Call ``cmd``, returning it's stdout output.
        """
        proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE)
        return proc.communicate()[0].strip().decode('utf-8')

    def excluded(self, tarinfo):
        """
        Checks if a file should be excluded from the archive.
        """
        return tarinfo in self.exclude

    def filter(self, tarinfo):
        """
        Checks if a file should be excluded from the archive.
        """
        if '/' + tarinfo.name in self.exclude:
            return None
        return tarinfo

    def run(self):
        """
        Create an archive and upload it, encrypting if necessary.
        """
        try:
            self.create_archive()
            self.encrypt_archive()
            self.upload_archive()
        finally:
            self.cleanup()

    def setup_config(self, options):
        """
        Set up configuration for this backup.
        """
        for key, value in options.items():
            if key.endswith('_eval'):
                value = self.eval(value)
                key = key.replace('_eval', '')
            self.options[key] = value


    def upload_archive(self):
        """
        Upload the archive.
        """
        for uploader in self.uploaders:
            uploader.upload(self.archive)

    def validate_destination(self):
        """
        Validate destination.
        """
        uploaders = []
        dests = self.options['destination'].split(self.DELIMITER)

        for dest in dests:
            scheme, destination = dest.strip().split('://', 1)

            for ulclass in Uploader.__subclasses__():
                if scheme == ulclass.scheme:
                    options = self.options.copy()
                    options['destination'] = destination
                    uploader = ulclass(options)
                    uploaders.append(uploader)

        self.uploaders = uploaders


    def validate_exclude(self):
        """
        Expand all the filenames in the exclude option. We do not need
        to validate the each file exists as it would be excluded
        anyway.
        """
        exclude = []
        for fn in self.options.get('exclude', '').split(self.DELIMITER):
            exclude.append(expand(fn.strip()))
        self.exclude = exclude

    def validate_files(self):
        """
        Make sure the files option is not empty and that each file
        exists.
        """
        if not self.options['files']:
            error("No files specified.")

        files = []
        for fn in self.options['files'].split(self.DELIMITER):
            fn = expand(fn.strip())
            if not any([os.path.isfile(fn), os.path.isdir(fn)]):
                error("Invalid file/directory '%s'." % fn)
            files.append(fn)
        self.files = files

    def validate_options(self):
        """
        Make sure each required option is present.
        """
        for option in self.REQUIRED_OPTIONS:
            if not self.options.get(option, None):
                error("Missing required option '%s'." % option)


def main():
    config = configparser.ConfigParser()

    try:
        config.readfp(open(expand(FILE)))
    except IOError:
        error("Couldn't read your config file.")

    # list all backups
    if len(sys.argv) == 1:
        sys.stdout.write('\n'.join(sorted(config.sections())) + '\n')
        sys.exit(0)

    # does the backup exist?
    try:
        options = dict(config.items(sys.argv[1]))
    except configparser.NoSectionError:
        error("Invalid backup '%s'" % sys.argv[1])

    # backup is good. let's do it
    backup = Backup(options)
    backup.run()


if __name__ == '__main__':
    main()
